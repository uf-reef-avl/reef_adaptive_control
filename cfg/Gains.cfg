#!/usr/bin/env python

PACKAGE = "reef_adaptive_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Velocity PID (uv)
gen.add("uP", double_t, 0, "Proportional gain for velocity", 0, 0, 2) # Default, Low, High
gen.add("uI", double_t, 0, "Integral gain for velocity", 0, 0, 1)
gen.add("uD", double_t, 0, "Derivative gain for velocity", 0, 0, 0.5)
gen.add("vP", double_t, 0, "Proportional gain for velocity", 0, 0, 2) # Default, Low, High
gen.add("vI", double_t, 0, "Integral gain for velocity", 0, 0, 1)
gen.add("vD", double_t, 0, "Derivative gain for velocity", 0, 0, 0.5)
gen.add("wP", double_t, 0, "Proportional gain for velocity", 0, 0, 2) # Default, Low, High
gen.add("wI", double_t, 0, "Integral gain for velocity", 0, 0, 1)
gen.add("wD", double_t, 0, "Derivative gain for velocity", 0, 0, 0.5)
gen.add("uvtau", double_t, 0, "Velocity Tau", 0, 0, 1)

# Parameters for the sigmoid function
gen.add("kp", double_t, 0, "Slope of velocity request curve", 0, 0, 1)
gen.add("deadzone", double_t, 0, "Deadzone region for velocity request", 0, 0, 0.5)
gen.add("max_vel", double_t, 0, "Max Velocity", 0, 0, 3)
gen.add("center_point", double_t, 0, "Center Point for the Sigmoid Function", 0, 0, 2.0)
gen.add("alpha", double_t, 0, "Proportional gain for position", 0, 0, 2)

# Position D only (ned)
gen.add("dP", double_t, 0, "Proportional gain for position", 0, 0, 5)
gen.add("dI", double_t, 0, "Integral gain for position", 0, 0, 1)
gen.add("dD", double_t, 0, "Derivative gain for position", 0, 0, 0.5)
gen.add("nedtau", double_t, 0, "Position Tau", 0, 0, 1)

# Yaw
gen.add("yawP", double_t, 0, "Proportional gain for yaw", 0, 0, 2)
gen.add("yawI", double_t, 0, "Integral gain for yaw", 0, 0, 1)
gen.add("yawD", double_t, 0, "Derivative gain for yaw", 0, 0, 0.5)
gen.add("yawtau", double_t, 0, "Yaw Tau", 0, 0, 1)

# Yaw Rate
gen.add("yawRateP", double_t, 0, "Proportional gain for yaw rate", 0, 0, 2)
gen.add("yawRateI", double_t, 0, "Integral gain for yaw rate", 0, 0, 1)
gen.add("yawRateD", double_t, 0, "Derivative gain for yaw rate", 0, 0, 0.5)
gen.add("yawRatetau", double_t, 0, "Yaw Rate Tau", 0, 0, 1)

# Additional params
gen.add("xIntegrator",   bool_t,   0, "Use xIntegrator",  True)
gen.add("uIntegrator",   bool_t,   0, "Use yIntegrator",  True)

# Max Params
gen.add("max_u", double_t, 0, "Max/Min U", 0, 0, 2.5)
gen.add("max_v", double_t, 0, "Max/Min U", 0, 0, 2.5)
gen.add("max_w", double_t, 0, "Max/Min U", 0, 0, 2.5)
gen.add("max_d", double_t, 0, "Max/Min U", 0, 0, 2.0)
gen.add("max_n", double_t, 0, "Max/Min U", 0, 0, 1.5)
gen.add("max_e", double_t, 0, "Max/Min U", 0, 0, 1.5)
gen.add("max_yaw_rate", double_t, 0, "Max/Min U", 0, 0, 0.50)

exit(gen.generate(PACKAGE, "position_controller", "Gains"))
